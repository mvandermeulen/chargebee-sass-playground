// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Reason -> Planetscale doesn't support FKey constraint
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_in Int?
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Subscription Mgmt
// Items: Plans are created and managed in Chargebee and synced to our DB via its webhooks.

enum ChargebeeSubscriptionStatus {
  future       @map("future")
  in_trial     @map("in_trial")
  active       @map("active")
  non_renewing @map("non_renewing")
  paused       @map("paused")
  cancelled    @map("cancelled")
}

enum ChargebeePricingModel {
  flat_fee  @map("flat_fee")
  per_unit  @map("per_unit")
  tiered    @map("tiered")
  volume    @map("volume")
  stairstep @map("stairstep")
}

enum ChargebeePeriodUnit {
  day   @map("day")
  week  @map("week")
  month @map("month")
  year  @map("year")
}

model Item {
  id          String      @unique
  name        String      @unique
  description String?
  active      Boolean     @default(true)
  metadata    Json?
  ItemPrice   ItemPrice[]
}

model ItemPrice {
  id           String                @unique
  name         String                @unique
  description  String?
  item         Item?                 @relation(fields: [itemId], references: [id])
  itemId       String
  metadata     Json?
  pricingModel ChargebeePricingModel @default(flat_fee)
  active       Boolean               @default(true)
  price        Int
  period       Int                   @default(1)
  periodUnit   ChargebeePeriodUnit
  currencyCode String                @db.VarChar(3)
  Subscription Subscription[]

  @@index([itemId])
}

model Subscription {
  id          String                      @unique
  User        User                        @relation(fields: [userId], references: [id])
  userId      String                      @unique
  ItemPrice   ItemPrice                   @relation(fields: [itemPriceId], references: [id])
  status      ChargebeeSubscriptionStatus
  itemPriceId String

  @@index([itemPriceId])
}
